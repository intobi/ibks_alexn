// <auto-generated />
using System;
using IBKS.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IBKS.Repositories.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IBKS.Domains.InstalledEnvironment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("InstalledEnvironment", "Support");
                });

            modelBuilder.Entity("IBKS.Domains.LogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("LogType", "Support");
                });

            modelBuilder.Entity("IBKS.Domains.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Priority", "Support");
                });

            modelBuilder.Entity("IBKS.Domains.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Status", "Support");
                });

            modelBuilder.Entity("IBKS.Domains.Ticket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Browser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CreatedByOid")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedByOID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Device")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("InstalledEnvironmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.Property<string>("Resolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TicketTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Url")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserOid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UserOID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "InstalledEnvironmentId" }, "IX_Ticket_InstalledEnvironmentId");

                    b.HasIndex(new[] { "PriorityId" }, "IX_Ticket_PriorityId");

                    b.HasIndex(new[] { "StatusId" }, "IX_Ticket_StatusId");

                    b.HasIndex(new[] { "TicketTypeId" }, "IX_Ticket_TicketTypeId");

                    b.HasIndex(new[] { "UserOid" }, "IX_Ticket_UserOID");

                    b.ToTable("Ticket", "Support");
                });

            modelBuilder.Entity("IBKS.Domains.TicketEventLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("EventDt")
                        .HasColumnType("datetime2");

                    b.Property<int>("LogTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TicketId")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LogTypeId" }, "IX_TicketEventLog_LogTypeId");

                    b.HasIndex(new[] { "TicketId" }, "IX_TicketEventLog_TicketId");

                    b.ToTable("TicketEventLog", "Support");
                });

            modelBuilder.Entity("IBKS.Domains.TicketReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Reply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReplyDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Tid")
                        .HasColumnType("bigint")
                        .HasColumnName("TId");

                    b.HasKey("Id");

                    b.ToTable("TicketReply", "Support");
                });

            modelBuilder.Entity("IBKS.Domains.TicketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("TicketType", "Support");
                });

            modelBuilder.Entity("IBKS.Domains.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("OID");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastScannedUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User", "Support");
                });

            modelBuilder.Entity("IBKS.Domains.Ticket", b =>
                {
                    b.HasOne("IBKS.Domains.InstalledEnvironment", "InstalledEnvironment")
                        .WithMany("Tickets")
                        .HasForeignKey("InstalledEnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IBKS.Domains.Priority", "Priority")
                        .WithMany("Tickets")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IBKS.Domains.Status", "Status")
                        .WithMany("Tickets")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IBKS.Domains.TicketType", "TicketType")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IBKS.Domains.User", "UserO")
                        .WithMany("Tickets")
                        .HasForeignKey("UserOid");

                    b.Navigation("InstalledEnvironment");

                    b.Navigation("Priority");

                    b.Navigation("Status");

                    b.Navigation("TicketType");

                    b.Navigation("UserO");
                });

            modelBuilder.Entity("IBKS.Domains.TicketEventLog", b =>
                {
                    b.HasOne("IBKS.Domains.LogType", "LogType")
                        .WithMany("TicketEventLogs")
                        .HasForeignKey("LogTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IBKS.Domains.Ticket", "Ticket")
                        .WithMany("TicketEventLogs")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogType");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("IBKS.Domains.InstalledEnvironment", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("IBKS.Domains.LogType", b =>
                {
                    b.Navigation("TicketEventLogs");
                });

            modelBuilder.Entity("IBKS.Domains.Priority", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("IBKS.Domains.Status", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("IBKS.Domains.Ticket", b =>
                {
                    b.Navigation("TicketEventLogs");
                });

            modelBuilder.Entity("IBKS.Domains.TicketType", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("IBKS.Domains.User", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
